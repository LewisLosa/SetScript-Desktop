<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SetScript Desktop</title>
    <style>
        /* Genel Stiller */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }

        body {
            overflow: hidden;
            height: 100vh;
            background: #0f0f0f;
        }

        /* Webview */
        #webview-container {
            height: 100vh;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        #webview {
            width: 100%;
            height: 100%;
        }

        /* Overlay */
        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 998;
        }

        #overlay.active {
            opacity: 1;
            visibility: visible;
        }

        /* Sidebar */
        #sidebar-container {
            position: fixed;
            right: 0;
            top: 0;
            height: 100vh;
            width: 380px;
            background: #1a1a1a;
            transform: translateX(380px);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 999;
            box-shadow: -5px 0 25px rgba(0, 0, 0, 0.3);
        }

        #sidebar-container.open {
            transform: translateX(0);
        }

        .sidebar-content {
            height: 100%;
            display: flex;
            flex-direction: column;
            padding: 24px;
        }

        .sidebar-header {
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-title {
            font-size: 28px;
            font-weight: 600;
            color: #ffffff;
            margin: 0;
            letter-spacing: -0.5px;
        }

        .sidebar-button {
            width: 100%;
            padding: 14px;
            background: rgba(255, 255, 255, 0.08);
            border: none;
            border-radius: 12px;
            color: #ffffff;
            font-size: 16px;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            margin-bottom: 20px;
        }

        .sidebar-button:hover {
            background: rgba(255, 255, 255, 0.12);
            transform: translateY(-1px);
        }

        /* Kaydedilen Öğeler */
        .saved-items {
            flex: 1;
            overflow-y: auto;
            margin: 0 -24px;
            padding: 0 24px;
        }

        .saved-item {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            margin-bottom: 12px;
            transition: all 0.2s ease;
            cursor: pointer;
            position: relative;
        }

        .saved-item:hover {
            background: rgba(255, 255, 255, 0.08);
        }

        .saved-item-content {
            padding: 16px;
            color: #ffffff;
        }

        .saved-item h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 500;
            color: #ffffff;
        }

        .saved-item p {
            margin: 4px 0 0;
            font-size: 14px;
            color: rgba(255, 255, 255, 0.6);
        }

        .saved-item-actions {
            position: absolute;
            right: 16px;
            top: 50%;
            transform: translateY(-50%);
            display: none;
            gap: 12px;
        }

        .saved-item:hover .saved-item-actions {
            display: flex;
        }

        .action-button {
            background: none;
            border: none;
            color: #ffffff;
            cursor: pointer;
            font-size: 18px;
            padding: 4px;
            opacity: 0.7;
            transition: all 0.2s ease;
        }

        .action-button:hover {
            opacity: 1;
            transform: scale(1.1);
        }

        .action-button.edit {
            color: #3498db;
        }

        .action-button.delete {
            color: #e74c3c;
        }

        .sidebar-footer {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .version {
            text-align: center;
            color: #ffffff;
            font-size: 14px;
            opacity: 0.6;
            margin-top: 12px;
        }

        /* Toggle Button */
        #sidebar-toggle {
            position: fixed;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 32px;
            height: 64px;
            background: #1a1a1a;
            border: none;
            border-radius: 8px 0 0 8px;
            color: #fff;
            cursor: pointer;
            z-index: 1000;
            box-shadow: -5px 0 25px rgba(0, 0, 0, 0.15);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        #sidebar-container.open ~ #sidebar-toggle {
            right: 380px;
        }

        #sidebar-toggle:hover {
            background: #2a2a2a;
        }

        .arrow {
            display: inline-block;
            transform: rotate(0deg);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 18px;
        }

        #sidebar-container.open ~ #sidebar-toggle .arrow {
            transform: rotate(180deg);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(8px);
            z-index: 1001;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .modal.show {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.9);
            background: #1a1a1a;
            border-radius: 16px;
            padding: 24px;
            width: 90%;
            max-width: 480px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .modal.show .modal-content {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }

        .modal-header {
            margin-bottom: 24px;
        }

        .modal-title {
            color: #fff;
            font-size: 24px;
            font-weight: 600;
            margin: 0;
        }

        .modal-body {
            margin-bottom: 24px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 8px;
            font-size: 14px;
        }

        .modal-input {
            width: 100%;
            padding: 12px 16px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: #fff;
            font-size: 16px;
            transition: all 0.2s ease;
        }

        .modal-input:focus {
            outline: none;
            border-color: #2196f3;
            background: rgba(255, 255, 255, 0.1);
        }

        .file-input-wrapper {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        #iconPreview {
            width: 48px;
            height: 48px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        #iconPreview img {
            max-width: 32px;
            max-height: 32px;
            object-fit: contain;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .modal-button {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .modal-button.primary {
            background: #2196f3;
            color: #fff;
        }

        .modal-button.primary:hover {
            background: #1976d2;
            transform: translateY(-2px);
        }

        .modal-button.secondary {
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
        }

        .modal-button.secondary:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-2px);
        }

        /* Ayarlar */
        .settings-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
        }

        .settings-section h4 {
            color: #fff;
            margin: 0 0 16px 0;
            font-size: 18px;
            font-weight: 500;
        }

        .setting-item {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
        }

        .setting-item:last-child {
            margin-bottom: 0;
        }

        .setting-label {
            display: flex;
            align-items: center;
            gap: 12px;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
        }

        .setting-label input[type="checkbox"] {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            background: transparent;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .setting-label input[type="checkbox"]:checked {
            background: #2196f3;
            border-color: #2196f3;
        }

        /* Ayarlar Modal Stili */
        .settings-form {
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .settings-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 15px;
        }

        .settings-section h3 {
            color: #fff;
            margin: 0 0 15px 0;
            font-size: 16px;
            font-weight: 500;
        }

        .setting-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 12px;
            padding: 8px 0;
        }

        .setting-info {
            flex: 1;
        }

        .setting-info h4 {
            color: #fff;
            margin: 0;
            font-size: 14px;
            font-weight: 500;
        }

        .setting-info p {
            color: #aaa;
            margin: 4px 0 0 0;
            font-size: 12px;
        }

        /* Toggle Switch */
        .switch {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #444;
            transition: .4s;
            border-radius: 24px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: #2196F3;
        }

        input:checked + .slider:before {
            transform: translateX(20px);
        }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 15px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-actions button {
            padding: 8px 16px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .primary-button {
            background: #2196F3;
            color: white;
        }

        .primary-button:hover {
            background: #1976D2;
        }

        .secondary-button {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .secondary-button:hover {
            background: rgba(255, 255, 255, 0.15);
        }

        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: transparent;
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.3);
        }
    </style>
</head>
<body>
    <div id="webview-container">
        <webview id="webview" src="https://setscript.com/" allowpopups></webview>
    </div>
    
    <div id="overlay"></div>
    
    <button id="sidebar-toggle">
        <span class="arrow">→</span>
    </button>

    <div id="sidebar-container">
        <div class="sidebar-content">
            <div class="sidebar-header">
                <h2 class="sidebar-title">SetScript</h2>
            </div>
            
            <div class="sidebar-actions">
                <button class="sidebar-button settings-button" onclick="showSettingsModal()">
                    ⚙️ Ayarlar
                </button>
                <button class="sidebar-button" onclick="showSaveModal()">
                    ➕ Kaydet
                </button>
            </div>

            <div id="savedItems" class="saved-items">
                <!-- Kaydedilen sayfalar buraya eklenecek -->
            </div>

            <div class="sidebar-footer">
                <div class="version">
                    SetScript Desktop v0.1.0 - Alpha
                </div>
            </div>
        </div>
    </div>

    <!-- Kaydetme Modal -->
    <div id="saveModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Sayfayı Kaydet</h3>
            </div>
            <div class="modal-body">
                <form id="saveForm">
                    <div class="form-group">
                        <label for="pageName">Sayfa Adı</label>
                        <input type="text" id="pageName" class="modal-input" placeholder="Sayfa adını girin" required>
                    </div>
                    <div class="form-group">
                        <label for="pageDesc">Açıklama</label>
                        <input type="text" id="pageDesc" class="modal-input" placeholder="Sayfa açıklaması (isteğe bağlı)">
                    </div>
                    <div class="form-group">
                        <label for="pageIcon">İkon</label>
                        <div class="file-input-wrapper">
                            <div id="iconPreview"></div>
                            <input type="file" id="pageIcon" accept="image/*" class="modal-input">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="modal-button secondary" onclick="hideSaveModal()">İptal</button>
                <button class="modal-button primary" onclick="savePage()">Kaydet</button>
            </div>
        </div>
    </div>

    <!-- Ayarlar Modal -->
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <h2 class="modal-title">Ayarlar</h2>
            <div class="settings-form">
                <div class="settings-section">
                    <h3>Pencere Ayarları</h3>
                    <div class="setting-item">
                        <div class="setting-info">
                            <h4>Tam Ekran Başlat</h4>
                            <p>Uygulama başlatıldığında otomatik olarak tam ekran modunda açılır</p>
                        </div>
                        <label class="switch">
                            <input type="checkbox" id="fullscreenToggle">
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="setting-item">
                        <div class="setting-info">
                            <h4>Her Zaman Üstte</h4>
                            <p>Pencereyi diğer pencerelerin üzerinde tutar</p>
                        </div>
                        <label class="switch">
                            <input type="checkbox" id="alwaysOnTopToggle">
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>

                <div class="settings-section">
                    <h3>Yakında Gelecek Özellikler</h3>
                    <div class="setting-item disabled">
                        <div class="setting-info">
                            <h4>Pencere Boyutunu Hatırla <span class="coming-soon">Yakında</span></h4>
                            <p>Bir sonraki açılışta son pencere boyutunu kullanır</p>
                        </div>
                        <label class="switch">
                            <input type="checkbox" disabled>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="setting-item disabled">
                        <div class="setting-info">
                            <h4>Çevrimdışı Erişim <span class="coming-soon">Yakında</span></h4>
                            <p>Sayfaları çevrimdışı görüntüleyebilmek için kaydeder</p>
                        </div>
                        <label class="switch">
                            <input type="checkbox" disabled>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="setting-item disabled">
                        <div class="setting-info">
                            <h4>Otomatik Önizleme <span class="coming-soon">Yakında</span></h4>
                            <p>Kaydedilen sayfalar için otomatik önizleme resmi oluşturur</p>
                        </div>
                        <label class="switch">
                            <input type="checkbox" disabled>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="setting-item disabled">
                        <div class="setting-info">
                            <h4>Geliştirici Modu <span class="coming-soon">Yakında</span></h4>
                            <p>Geliştirici modunu açar</p>
                        </div>
                        <label class="switch">
                            <input type="checkbox" disabled>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="setting-item disabled">
                        <div class="setting-info">
                            <h4>Performans modu<span class="coming-soon">Yakında</span></h4>
                            <p>Yüksek performansı için zorlar</p>
                        </div>
                        <label class="switch">
                            <input type="checkbox" disabled>
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>
            </div>
            <div class="modal-actions">
                <button onclick="hideSettingsModal()" class="secondary-button">İptal</button>
                <button onclick="saveSettings()" class="primary-button">Kaydet</button>
            </div>
        </div>
    </div>

    <style>
        /* Ayarlar Modal Stili */
        .settings-form {
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .settings-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            padding: 15px;
        }

        .settings-section h3 {
            color: #fff;
            margin: 0 0 15px 0;
            font-size: 16px;
            font-weight: 500;
        }

        .setting-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 12px;
            padding: 8px 0;
        }

        .setting-item.disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .setting-info {
            flex: 1;
        }

        .setting-info h4 {
            color: #fff;
            margin: 0;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .coming-soon {
            background: #2196F3;
            color: white;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: 500;
        }

        .setting-info p {
            color: #aaa;
            margin: 4px 0 0 0;
            font-size: 12px;
        }

        /* Toggle Switch */
        .switch {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #444;
            transition: .4s;
            border-radius: 24px;
        }

        .disabled .slider {
            cursor: not-allowed;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: #2196F3;
        }

        input:checked + .slider:before {
            transform: translateX(20px);
        }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            padding: 15px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-actions button {
            padding: 8px 16px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .primary-button {
            background: #2196F3;
            color: white;
        }

        .primary-button:hover {
            background: #1976D2;
        }

        .secondary-button {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .secondary-button:hover {
            background: rgba(255, 255, 255, 0.15);
        }
    </style>

    <script>
        let pages = [];
        const webview = document.querySelector('webview');

        // Modal göster/gizle fonksiyonları
        function showModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'block';
            setTimeout(() => modal.classList.add('show'), 10);
        }

        function hideModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.classList.remove('show');
            setTimeout(() => modal.style.display = 'none', 300);
        }

        function showSaveModal() {
            showModal('saveModal');
            document.getElementById('pageName').focus();
        }

        function hideSaveModal() {
            hideModal('saveModal');
            document.getElementById('saveForm').reset();
        }

        function showSettingsModal() {
            showModal('settingsModal');
        }

        function hideSettingsModal() {
            hideModal('settingsModal');
        }

        // Sidebar yönetimi
        let sidebarOpen = false;
        const sidebarContainer = document.getElementById('sidebar-container');
        const overlay = document.getElementById('overlay');

        function saveSidebarState(isOpen) {
            localStorage.setItem('sidebarOpen', isOpen);
        }

        function loadSidebarState() {
            return localStorage.getItem('sidebarOpen') === 'true';
        }

        function setSidebarState(isOpen) {
            sidebarOpen = isOpen;
            if (isOpen) {
                sidebarContainer.classList.add('open');
                overlay.classList.add('active');
                webview.style.pointerEvents = 'none';
            } else {
                sidebarContainer.classList.remove('open');
                overlay.classList.remove('active');
                webview.style.pointerEvents = 'auto';
            }
            saveSidebarState(isOpen);
        }

        function toggleSidebar() {
            setSidebarState(!sidebarOpen);
        }

        // Event listeners
        document.getElementById('sidebar-toggle').addEventListener('click', toggleSidebar);
        overlay.addEventListener('click', () => setSidebarState(false));

        // ESC tuşu ile modalları kapat
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (document.getElementById('saveModal').classList.contains('show')) {
                    hideSaveModal();
                }
                if (document.getElementById('settingsModal').classList.contains('show')) {
                    hideSettingsModal();
                }
                if (sidebarOpen) {
                    setSidebarState(false);
                }
            }
        });

        // Modal dışına tıklandığında kapat
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    hideModal(modal.id);
                }
            });
        });

        // Sayfa yüklendiğinde
        document.addEventListener('DOMContentLoaded', () => {
            const savedState = loadSidebarState();
            setSidebarState(savedState);
            loadSavedPages();
            window.electronAPI.getSettings();
        });

        // Kaydedilen sayfaları yükle
        async function loadSavedPages() {
            try {
                pages = await window.electronAPI.getSavedPages();
                displaySavedPages(pages);
            } catch (error) {
                console.error('Kaydedilen sayfalar yüklenirken hata:', error);
            }
        }

        // Kaydedilen sayfaları görüntüle
        function displaySavedPages(pages) {
            const savedItemsContainer = document.getElementById('savedItems');
            savedItemsContainer.innerHTML = '';

            if (pages && pages.length > 0) {
                pages.forEach(page => {
                    const pageElement = createPageElement(page);
                    savedItemsContainer.appendChild(pageElement);
                });
            }
        }

        // Sayfa elementi oluştur
        function createPageElement(page) {
            const div = document.createElement('div');
            div.className = 'saved-item';
            div.onclick = () => openPage(page.id);
            div.innerHTML = `
                <div class="saved-item-content">
                    <div class="saved-item-info">
                        <h3>${page.name}</h3>
                        ${page.description ? `<p>${page.description}</p>` : ''}
                    </div>
                    <div class="saved-item-actions">
                        <button onclick="event.stopPropagation(); showEditModal('${page.id}')" class="action-button edit">✏️</button>
                        <button onclick="event.stopPropagation(); confirmDelete('${page.id}')" class="action-button delete">🗑️</button>
                    </div>
                </div>
            `;
            return div;
        }

        // Sayfa açma işlemi
        async function openPage(pageId) {
            try {
                const page = await window.electronAPI.getPage(pageId);
                if (page && page.url) {
                    webview.loadURL(page.url);
                    setSidebarState(false);
                }
            } catch (error) {
                console.error('Sayfa açma hatası:', error);
            }
        }

        // Silme onayı
        function confirmDelete(pageId) {
            if (confirm('Bu sayfayı silmek istediğinize emin misiniz?')) {
                deletePage(pageId);
            }
        }

        // Sayfa silme işlemi
        async function deletePage(pageId) {
            try {
                await window.electronAPI.deletePage(pageId);
                loadSavedPages();
            } catch (error) {
                console.error('Sayfa silme hatası:', error);
                alert('Sayfa silinirken bir hata oluştu');
            }
        }

        // Sayfa kaydetme işlemi
        async function savePage() {
            const name = document.getElementById('pageName').value;
            const description = document.getElementById('pageDesc').value;

            if (!name) {
                alert('İsim alanı boş olamaz');
                return;
            }

            try {
                const pageData = {
                    id: Date.now().toString(),
                    name,
                    description,
                    url: webview.getURL(),
                    createdAt: new Date().toISOString()
                };

                await window.electronAPI.savePage(pageData);
                hideSaveModal();
                loadSavedPages();
            } catch (error) {
                console.error('Kaydetme hatası:', error);
                alert('Sayfa kaydedilirken bir hata oluştu');
            }
        }

        // Düzenleme modalını göster
        function showEditModal(pageId) {
            const page = pages.find(p => p.id === pageId);
            if (page) {
                document.getElementById('editPageId').value = page.id;
                document.getElementById('editPageName').value = page.name;
                document.getElementById('editPageDesc').value = page.description || '';
                showModal('editModal');
                document.getElementById('editPageName').focus();
            }
        }

        // Düzenleme modalını gizle
        function hideEditModal() {
            hideModal('editModal');
            document.getElementById('editForm').reset();
        }

        // Sayfa güncelleme
        async function updatePage() {
            const pageId = document.getElementById('editPageId').value;
            const name = document.getElementById('editPageName').value;
            const description = document.getElementById('editPageDesc').value;

            if (!name) {
                alert('İsim alanı boş olamaz');
                return;
            }

            try {
                await window.electronAPI.updatePage({
                    id: pageId,
                    name,
                    description
                });
                hideEditModal();
                loadSavedPages();
            } catch (error) {
                console.error('Güncelleme hatası:', error);
                alert('Sayfa güncellenirken bir hata oluştu');
            }
        }

        // Ayarlar işlemleri
        window.electronAPI.onSettingsLoaded((event, settings) => {
            document.getElementById('fullscreenToggle').checked = settings.isFullscreen || false;
            document.getElementById('alwaysOnTopToggle').checked = settings.isAlwaysOnTop || false;
        });

        function saveSettings() {
            const settings = {
                isFullscreen: document.getElementById('fullscreenToggle').checked,
                isAlwaysOnTop: document.getElementById('alwaysOnTopToggle').checked
            };
            
            window.electronAPI.saveSettings(settings);
            hideSettingsModal();
        }
    </script>
</body>
</html>
