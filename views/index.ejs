<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SetScript Desktop</title>
    <style>
        /* Genel Stiller */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }

        body {
            overflow: hidden;
            height: 100vh;
            background: #0f0f0f;
        }

        /* Webview */
        #webview-container {
            height: 100vh;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        #webview {
            width: 100%;
            height: 100%;
        }

        /* Overlay */
        #overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 998;
        }

        #overlay.active {
            opacity: 1;
            visibility: visible;
        }

        /* Sidebar */
        #sidebar-container {
            position: fixed;
            right: 0;
            top: 0;
            height: 100vh;
            width: 380px;
            background: #1a1a1a;
            transform: translateX(380px);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 999;
            box-shadow: -5px 0 25px rgba(0, 0, 0, 0.15);
        }

        #sidebar-container.open {
            transform: translateX(0);
        }

        .sidebar-content {
            height: 100%;
            display: flex;
            flex-direction: column;
            padding: 24px;
        }

        .sidebar-header {
            margin-bottom: 24px;
            padding-bottom: 16px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-title {
            font-size: 24px;
            font-weight: 600;
            color: #fff;
            margin: 0;
        }

        /* Sidebar Butonları */
        .sidebar-button {
            width: 100%;
            padding: 12px 16px;
            background: rgba(255, 255, 255, 0.05);
            border: none;
            border-radius: 12px;
            color: #fff;
            font-size: 16px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .sidebar-button:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }

        .sidebar-button:active {
            transform: translateY(0);
        }

        /* Kaydedilen Öğeler */
        .saved-items {
            flex: 1;
            overflow-y: auto;
            margin: 16px -8px;
            padding: 0 8px;
        }

        .saved-item {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            margin-bottom: 12px;
            overflow: hidden;
            transition: all 0.2s ease;
        }

        .saved-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-2px);
        }

        .saved-item-content {
            padding: 16px;
            display: flex;
            align-items: center;
            gap: 12px;
            cursor: pointer;
        }

        .saved-item-icon {
            width: 32px;
            height: 32px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .saved-item-icon img {
            width: 24px;
            height: 24px;
            object-fit: contain;
        }

        .saved-item-info {
            flex: 1;
            min-width: 0;
        }

        .saved-item-name {
            color: #fff;
            font-weight: 500;
            margin-bottom: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .saved-item-url {
            color: rgba(255, 255, 255, 0.5);
            font-size: 12px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Toggle Button */
        #sidebar-toggle {
            position: fixed;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            width: 32px;
            height: 64px;
            background: #1a1a1a;
            border: none;
            border-radius: 8px 0 0 8px;
            color: #fff;
            cursor: pointer;
            z-index: 1000;
            box-shadow: -5px 0 25px rgba(0, 0, 0, 0.15);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        #sidebar-container.open ~ #sidebar-toggle {
            right: 380px;
        }

        #sidebar-toggle:hover {
            background: #2a2a2a;
        }

        .arrow {
            display: inline-block;
            transform: rotate(0deg);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 18px;
        }

        #sidebar-container.open ~ #sidebar-toggle .arrow {
            transform: rotate(180deg);
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(8px);
            z-index: 1001;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .modal.show {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) scale(0.9);
            background: #1a1a1a;
            border-radius: 16px;
            padding: 24px;
            width: 90%;
            max-width: 480px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .modal.show .modal-content {
            transform: translate(-50%, -50%) scale(1);
            opacity: 1;
        }

        .modal-header {
            margin-bottom: 24px;
        }

        .modal-title {
            color: #fff;
            font-size: 24px;
            font-weight: 600;
            margin: 0;
        }

        .modal-body {
            margin-bottom: 24px;
        }

        .form-group {
            margin-bottom: 16px;
        }

        .form-group label {
            display: block;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 8px;
            font-size: 14px;
        }

        .modal-input {
            width: 100%;
            padding: 12px 16px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: #fff;
            font-size: 16px;
            transition: all 0.2s ease;
        }

        .modal-input:focus {
            outline: none;
            border-color: #2196f3;
            background: rgba(255, 255, 255, 0.1);
        }

        .file-input-wrapper {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        #iconPreview {
            width: 48px;
            height: 48px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        #iconPreview img {
            max-width: 32px;
            max-height: 32px;
            object-fit: contain;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .modal-button {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .modal-button.primary {
            background: #2196f3;
            color: #fff;
        }

        .modal-button.primary:hover {
            background: #1976d2;
            transform: translateY(-2px);
        }

        .modal-button.secondary {
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
        }

        .modal-button.secondary:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateY(-2px);
        }

        /* Ayarlar */
        .settings-section {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
        }

        .settings-section h4 {
            color: #fff;
            margin: 0 0 16px 0;
            font-size: 18px;
            font-weight: 500;
        }

        .setting-item {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
        }

        .setting-item:last-child {
            margin-bottom: 0;
        }

        .setting-label {
            display: flex;
            align-items: center;
            gap: 12px;
            color: rgba(255, 255, 255, 0.7);
            cursor: pointer;
        }

        .setting-label input[type="checkbox"] {
            width: 20px;
            height: 20px;
            border-radius: 4px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            background: transparent;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .setting-label input[type="checkbox"]:checked {
            background: #2196f3;
            border-color: #2196f3;
        }

        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: transparent;
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.3);
        }
    </style>
</head>
<body>
    <div id="webview-container">
        <webview id="webview" src="https://setscript.com/" allowpopups></webview>
    </div>
    
    <div id="overlay"></div>
    
    <button id="sidebar-toggle">
        <span class="arrow">→</span>
    </button>

    <div id="sidebar-container">
        <div class="sidebar-content">
            <div class="sidebar-header">
                <h2 class="sidebar-title">SetScript</h2>
            </div>
            
            <div class="sidebar-actions">
                <button class="sidebar-button" onclick="showSaveModal()">
                    ➕ Kaydet
                </button>
            </div>

            <div id="savedItems" class="saved-items">
                <!-- Kaydedilen sayfalar buraya eklenecek -->
            </div>

            <div class="sidebar-footer">
                <button class="sidebar-button settings-button" onclick="showSettingsModal()">
                    ⚙️ Ayarlar
                </button>
                <div class="version">
                    SetScript Desktop v1.0.0
                </div>
            </div>
        </div>
    </div>

    <!-- Kaydetme Modal -->
    <div id="saveModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Sayfayı Kaydet</h3>
            </div>
            <div class="modal-body">
                <form id="saveForm">
                    <div class="form-group">
                        <label for="pageName">Sayfa Adı</label>
                        <input type="text" id="pageName" class="modal-input" placeholder="Sayfa adını girin" required>
                    </div>
                    <div class="form-group">
                        <label for="pageDesc">Açıklama</label>
                        <input type="text" id="pageDesc" class="modal-input" placeholder="Sayfa açıklaması (isteğe bağlı)">
                    </div>
                    <div class="form-group">
                        <label for="pageIcon">İkon</label>
                        <div class="file-input-wrapper">
                            <div id="iconPreview"></div>
                            <input type="file" id="pageIcon" accept="image/*" class="modal-input">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="modal-button secondary" onclick="hideSaveModal()">İptal</button>
                <button class="modal-button primary" onclick="savePage()">Kaydet</button>
            </div>
        </div>
    </div>

    <!-- Ayarlar Modal -->
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Ayarlar</h3>
            </div>
            <div class="modal-body">
                <div class="settings-section">
                    <h4>Pencere Ayarları</h4>
                    <div class="setting-item">
                        <label class="setting-label">
                            <input type="checkbox" id="fullscreenToggle">
                            Tam Ekran
                        </label>
                    </div>
                    <div class="setting-item">
                        <label class="setting-label">
                            <input type="checkbox" id="alwaysOnTopToggle">
                            Her Zaman Üstte
                        </label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="modal-button secondary" onclick="hideSettingsModal()">Kapat</button>
                <button class="modal-button primary" onclick="saveSettings()">Kaydet</button>
            </div>
        </div>
    </div>

    <script>
        // Modal göster/gizle fonksiyonları
        function showModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'block';
            setTimeout(() => modal.classList.add('show'), 10);
        }

        function hideModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.classList.remove('show');
            setTimeout(() => modal.style.display = 'none', 300);
        }

        function showSaveModal() {
            showModal('saveModal');
            document.getElementById('pageName').focus();
        }

        function hideSaveModal() {
            hideModal('saveModal');
            document.getElementById('saveForm').reset();
            document.getElementById('iconPreview').innerHTML = '';
        }

        function showSettingsModal() {
            showModal('settingsModal');
        }

        function hideSettingsModal() {
            hideModal('settingsModal');
        }

        // ESC tuşu ile modalları kapat
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (document.getElementById('saveModal').classList.contains('show')) {
                    hideSaveModal();
                }
                if (document.getElementById('settingsModal').classList.contains('show')) {
                    hideSettingsModal();
                }
                if (sidebarOpen) {
                    setSidebarState(false);
                }
            }
        });

        // Modal dışına tıklandığında kapat
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    hideModal(modal.id);
                }
            });
        });

        // Sidebar yönetimi
        let sidebarOpen = false;
        const sidebarContainer = document.getElementById('sidebar-container');
        const overlay = document.getElementById('overlay');
        const webview = document.querySelector('webview');

        function saveSidebarState(isOpen) {
            localStorage.setItem('sidebarOpen', isOpen);
        }

        function loadSidebarState() {
            return localStorage.getItem('sidebarOpen') === 'true';
        }

        function setSidebarState(isOpen) {
            sidebarOpen = isOpen;
            if (isOpen) {
                sidebarContainer.classList.add('open');
                overlay.classList.add('active');
                webview.style.pointerEvents = 'none';
            } else {
                sidebarContainer.classList.remove('open');
                overlay.classList.remove('active');
                webview.style.pointerEvents = 'auto';
            }
            saveSidebarState(isOpen);
        }

        function toggleSidebar() {
            setSidebarState(!sidebarOpen);
        }

        // Sayfa yüklendiğinde
        document.addEventListener('DOMContentLoaded', () => {
            const savedState = loadSidebarState();
            setSidebarState(savedState);
            
            // Kaydedilen sayfaları getir
            window.electronAPI.getSavedPages();
            
            // Ayarları getir
            window.electronAPI.getSettings();
        });

        // Kaydetme işlemleri
        async function savePage() {
            const name = document.getElementById('pageName').value;
            if (!name) {
                alert('İsim alanı boş olamaz');
                return;
            }

            const iconInput = document.getElementById('pageIcon');
            const desc = document.getElementById('pageDesc').value;
            const currentUrl = webview.getURL();

            try {
                if (iconInput.files && iconInput.files[0]) {
                    const reader = new FileReader();
                    reader.onload = async (e) => {
                        const pageData = {
                            name: name,
                            desc: desc,
                            url: currentUrl,
                            icon: e.target.result
                        };
                        await window.electronAPI.savePage(pageData);
                        hideSaveModal();
                        // Kaydedilen sayfaları yenile
                        window.electronAPI.getSavedPages();
                    };
                    reader.readAsDataURL(iconInput.files[0]);
                } else {
                    const pageData = {
                        name: name,
                        desc: desc,
                        url: currentUrl,
                        icon: ''
                    };
                    await window.electronAPI.savePage(pageData);
                    hideSaveModal();
                    // Kaydedilen sayfaları yenile
                    window.electronAPI.getSavedPages();
                }
            } catch (error) {
                console.error('Kaydetme hatası:', error);
                alert('Sayfa kaydedilirken bir hata oluştu');
            }
        }

        // Kaydedilen sayfaları göster
        window.electronAPI.onSavedPages((event, pages) => {
            const savedItems = document.getElementById('savedItems');
            savedItems.innerHTML = '';
            
            if (Array.isArray(pages)) {
                pages.forEach(page => {
                    const itemHtml = `
                        <div class="saved-item" data-id="${page.id}">
                            <div class="saved-item-content" onclick="webview.loadURL('${page.url}')">
                                <div class="saved-item-icon">
                                    ${page.icon ? `<img src="${page.icon}" alt="${page.name}">` : ''}
                                </div>
                                <div class="saved-item-info">
                                    <div class="saved-item-name">${page.name}</div>
                                    <div class="saved-item-url">${page.url}</div>
                                </div>
                            </div>
                        </div>
                    `;
                    savedItems.insertAdjacentHTML('beforeend', itemHtml);
                });
            }
        });

        // Ayarlar işlemleri
        window.electronAPI.onSettingsLoaded((event, settings) => {
            document.getElementById('fullscreenToggle').checked = settings.isFullscreen || false;
            document.getElementById('alwaysOnTopToggle').checked = settings.isAlwaysOnTop || false;
        });

        function saveSettings() {
            const settings = {
                isFullscreen: document.getElementById('fullscreenToggle').checked,
                isAlwaysOnTop: document.getElementById('alwaysOnTopToggle').checked
            };
            
            window.electronAPI.saveSettings(settings);
            hideSettingsModal();
        }

        // Event listeners
        document.getElementById('sidebar-toggle').addEventListener('click', toggleSidebar);
        overlay.addEventListener('click', () => setSidebarState(false));
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && sidebarOpen) {
                setSidebarState(false);
            }
        });

        // İkon önizleme
        document.getElementById('pageIcon').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('iconPreview').innerHTML = `
                        <img src="${e.target.result}" alt="Seçilen ikon">
                    `;
                }
                reader.readAsDataURL(file);
            }
        });
    </script>
</body>
</html>
